{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\834043\\\\Desktop\\\\study\\\\Project1\\\\src\\\\Components\\\\PostComponents\\\\TOC.js\";\nimport React, { Component } from 'react';\nimport { Table } from 'reactstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\n\nconst format = require('date-format');\n\nclass TOC extends Component {\n  /*상위 컴포넌트(여기서는 App) 바뀌엇을때 그 전부 하위 컴포넌트 불러오지 않기 위해(효율성 때문),\r\n  concat을 썻을때만 newProps 값 바뀌는거 알수있다, push 쓰면 원본도 바뀌므로 모름*/\n  shouldComponentUpdate(newProps, newState) {\n    console.log('===>TOC render shouldComponentUpdate', newProps.data, this.props.data);\n\n    if (this.props.data === newProps.data) {\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    console.log('===>TOC render');\n    let lists = [];\n    let data = this.props.data;\n    let i = 0;\n    const columns = [{\n      datafield: \"id\",\n      text: \"NO.\"\n    }, {\n      datafield: \"title\",\n      text: \"TITLE\"\n    }, {\n      datafield: \"writer\",\n      text: \"NAME\"\n    }, {\n      datafield: \"date\",\n      text: \"DATE\"\n    }];\n    console.log(data);\n\n    while (i < data.length) {\n      let date = data[i].date;\n      let nowDate = format.asString('MM-dd-yyyy', new Date());\n      if (date === now) //  format.asString('MM-dd-yyyy', date);\n        lists.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: data[i].id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 6\n          }\n        }, data[i].id), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          href: \"/contents/\" + data[i].id,\n          \"data-id\": data[i].id // e.target.dataset.id 에 여기 넣은값이 들어가서추출가능\n          ,\n          onClick: function (id, e) {\n            e.preventDefault();\n            this.props.onChangePage(id);\n          }.bind(this, data[i].id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 7\n          }\n        }, data[i].title)), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 6\n          }\n        }, data[i].writer), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 6\n          }\n        }, date)));\n      i = i + 1;\n    } // while(i< data.length){\n    //  let date = data[i].date;\n    //  let nowDate = format.asString('MM-dd', new Date());\n    // //  format.asString('MM-dd-yyyy', date);\n    // lists.push(\n    // <tr key={data[i].id}>\n    // \t<td>\n    // \t\t{data[i].id}\n    // \t</td>\n    // \t<td>\n    // \t\t<a \n    // \t\thref={\"/contents/\"+data[i].id}\n    // \t\tdata-id ={data[i].id}// e.target.dataset.id 에 여기 넣은값이 들어가서추출가능\n    // \t\tonClick = {function(id, e) {\n    // \t\t\te.preventDefault();\n    // \t\t\tthis.props.onChangePage(id); \n    // \t\t}.bind(this, data[i].id)}\n    // \t\t>{data[i].title}</a>\n    // \t</td>\n    // \t<td>\n    // \t\t{data[i].writer}\n    // \t</td>\n    // \t<td>\n    // \t\t{date}\n    // \t</td>\n    // </tr>\t\t\n    // );\n    // \ti=i+1;\n    // }\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, {\n      keyField: \"id\",\n      data: lists,\n      columns: columns,\n      pagination: paginationFactory(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 4\n      }\n    })) // <Table striped bordered hover size=\"sm\">\n    // \t<thead>\n    // \t\t<tr>\n    // \t\t\t<th>#</th>\n    // \t\t\t<th>Title</th>\n    // \t\t\t<th>Name</th>\n    // \t\t\t<th>Date</th>\n    // \t\t</tr>\n    // \t</thead>\n    // \t<tbody>\n    // \t\t{lists}\n    // \t</tbody>\t\n    // </Table>\n    // <nav>\n    //   <ul>\n    // \t{lists}\n    //   </ul>\n    // </nav>\n    ;\n  }\n\n}\n\nexport default TOC;","map":{"version":3,"sources":["C:/Users/834043/Desktop/study/Project1/src/Components/PostComponents/TOC.js"],"names":["React","Component","Table","BootstrapTable","paginationFactory","format","require","TOC","shouldComponentUpdate","newProps","newState","console","log","data","props","render","lists","i","columns","datafield","text","length","date","nowDate","asString","Date","now","push","id","e","preventDefault","onChangePage","bind","title","writer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nconst format = require('date-format');\r\n\r\nclass TOC extends Component{\r\n\t/*상위 컴포넌트(여기서는 App) 바뀌엇을때 그 전부 하위 컴포넌트 불러오지 않기 위해(효율성 때문),\r\n\tconcat을 썻을때만 newProps 값 바뀌는거 알수있다, push 쓰면 원본도 바뀌므로 모름*/\r\n\tshouldComponentUpdate(newProps, newState) {\r\n\t\tconsole.log('===>TOC render shouldComponentUpdate',newProps.data, this.props.data);\r\n\t\r\n\tif(this.props.data === newProps.data){\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\trender() {\r\n\tconsole.log('===>TOC render');\r\n\tlet lists =[];\r\n\tlet data = this.props.data;\r\n\tlet i =0;\r\n\tconst columns =[\r\n\t\t{datafield: \"id\", text: \"NO.\"},\r\n\t\t{datafield: \"title\", text: \"TITLE\"},\r\n\t\t{datafield: \"writer\", text: \"NAME\"},\r\n\t\t{datafield: \"date\", text: \"DATE\"}\r\n\t]\r\n\tconsole.log(data);\r\n\twhile(i< data.length){\r\n\t\tlet date = data[i].date;\r\n\t\tlet nowDate = format.asString('MM-dd-yyyy', new Date());\r\n\t\tif(date ===now)\r\n\t   //  format.asString('MM-dd-yyyy', date);\r\n\t   lists.push(\r\n\t   <tr key={data[i].id}>\r\n\t\t   <td>\r\n\t\t\t   {data[i].id}\r\n\t\t   </td>\r\n\t\t   <td>\r\n\t\t\t   <a \r\n\t\t\t   href={\"/contents/\"+data[i].id}\r\n\t\t\t   data-id ={data[i].id}// e.target.dataset.id 에 여기 넣은값이 들어가서추출가능\r\n\t\t\t   onClick = {function(id, e) {\r\n\t\t\t\t   e.preventDefault();\r\n\t\t\t\t   this.props.onChangePage(id); \r\n\t\t\t   }.bind(this, data[i].id)}\r\n\t\t\t   >{data[i].title}</a>\r\n\t\t   </td>\r\n\t\t   <td>\r\n\t\t\t   {data[i].writer}\r\n\t\t   </td>\r\n\t\t   <td>\r\n\t\t\t   {date}\r\n\t\t   </td>\r\n\t   </tr>\t\t\r\n\t   );\r\n\t\t   i=i+1;\r\n\t   }\r\n\t// while(i< data.length){\r\n\t//  let date = data[i].date;\r\n\t//  let nowDate = format.asString('MM-dd', new Date());\r\n\t// //  format.asString('MM-dd-yyyy', date);\r\n\t// lists.push(\r\n\t// <tr key={data[i].id}>\r\n\t// \t<td>\r\n\t// \t\t{data[i].id}\r\n\t// \t</td>\r\n\t// \t<td>\r\n\t// \t\t<a \r\n\t// \t\thref={\"/contents/\"+data[i].id}\r\n\t// \t\tdata-id ={data[i].id}// e.target.dataset.id 에 여기 넣은값이 들어가서추출가능\r\n\t// \t\tonClick = {function(id, e) {\r\n\t// \t\t\te.preventDefault();\r\n\t// \t\t\tthis.props.onChangePage(id); \r\n\t// \t\t}.bind(this, data[i].id)}\r\n\t// \t\t>{data[i].title}</a>\r\n\t// \t</td>\r\n\t// \t<td>\r\n\t// \t\t{data[i].writer}\r\n\t// \t</td>\r\n\t// \t<td>\r\n\t// \t\t{date}\r\n\t// \t</td>\r\n\t// </tr>\t\t\r\n\t// );\r\n\t// \ti=i+1;\r\n\t// }\r\n\r\n\t  return(\r\n\t\t<div>\r\n\t\t\t<BootstrapTable\r\n\t\t\t\tkeyField=\"id\"\r\n\t\t\t\tdata={lists}\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tpagination={paginationFactory()}\r\n\t\t\t/>\r\n\t\t</div>\r\n\r\n\t\t// <Table striped bordered hover size=\"sm\">\r\n\t\t// \t<thead>\r\n\t\t// \t\t<tr>\r\n\t\t// \t\t\t<th>#</th>\r\n\t\t// \t\t\t<th>Title</th>\r\n\t\t// \t\t\t<th>Name</th>\r\n\t\t// \t\t\t<th>Date</th>\r\n\t\t// \t\t</tr>\r\n\t\t// \t</thead>\r\n\t\t// \t<tbody>\r\n\t\t// \t\t{lists}\r\n\t\t// \t</tbody>\t\r\n\t\t// </Table>\r\n\t\t// <nav>\r\n\t\t//   <ul>\r\n\t\t// \t{lists}\r\n\t\t//   </ul>\r\n\t\t// </nav>\r\n\t  );\r\n\t}\r\n  }\r\n\r\n  export default TOC;"]},"metadata":{},"sourceType":"module"}