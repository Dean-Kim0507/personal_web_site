{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../Services/Auth.service\";\nexport const register = (user_data, imgFile) => dispatch => {\n  return AuthService.register(user_data, imgFile); // .then(\n  // \t(response) => {\n  // \t\tdispatch({\n  // \t\t\ttype: REGISTER_SUCCESS,\n  // \t\t});\n  // \t\tdispatch({\n  // \t\t\ttype: SET_MESSAGE,\n  // \t\t\tpayload: response.data.message,\n  // \t\t});\n  // \t\tconsole.log('actions: ', response.data.message)\n  // \t\treturn Promise.resolve();\n  // \t},\n  // \t(error) => {\n  // \t\tconst message =\n  // \t\t\t(error.response &&\n  // \t\t\t\terror.response.data &&\n  // \t\t\t\terror.response.data.message) ||\n  // \t\t\terror.message ||\n  // \t\t\terror.toString();\n  // \t\tdispatch({\n  // \t\t\ttype: REGISTER_FAIL,\n  // \t\t});\n  // \t\tdispatch({\n  // \t\t\ttype: SET_MESSAGE,\n  // \t\t\tpayload: message,\n  // \t\t});\n  // \t\treturn Promise.reject();\n  // \t}\n  // );\n};\nexport const login = (userID, password) => dispatch => {\n  return AuthService.login(userID, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/834043/Desktop/study/Personal_Web_Site/client/src/Actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","user_data","imgFile","dispatch","login","userID","password","then","data","type","payload","user","message","Promise","resolve","error","response","toString","reject","logout"],"mappings":"AAAA,SACCA,gBADD,EAECC,aAFD,EAGCC,aAHD,EAICC,UAJD,EAKCC,MALD,EAMCC,WAND,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAyBC,QAAD,IAAc;AAC7D,SAAOJ,WAAW,CAACC,QAAZ,CAAqBC,SAArB,EAAgCC,OAAhC,CAAP,CAD6D,CAE7D;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,CAnCM;AAqCP,OAAO,MAAME,KAAK,GAAG,CAACC,MAAD,EAASC,QAAT,KAAuBH,QAAD,IAAc;AACxD,SAAOJ,WAAW,CAACK,KAAZ,CAAkBC,MAAlB,EAA0BC,QAA1B,EACLC,IADK,CAEJC,IAAD,IAAU;AACTL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEd,aADE;AAERe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,IAAI,EAAEH;AAAR;AAFD,KAAD,CAAR;AAKAL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEX,WADE;AAERY,MAAAA,OAAO,EAAEF,IAAI,CAACI;AAFN,KAAD,CAAR;AAIA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACA,GAbI,EAcJC,KAAD,IAAW;AACV,UAAMH,OAAO,GACXG,KAAK,CAACC,QAAN,IACAD,KAAK,CAACC,QAAN,CAAeR,IADf,IAEAO,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBI,OAFrB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACE,QAAN,EALD;AAOAd,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEb;AADE,KAAD,CAAR;AAIAO,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEX,WADE;AAERY,MAAAA,OAAO,EAAEE;AAFD,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACK,MAAR,EAAP;AACA,GAhCI,CAAP;AAkCA,CAnCM;AAqCP,OAAO,MAAMC,MAAM,GAAG,MAAOhB,QAAD,IAAc;AACzCJ,EAAAA,WAAW,CAACoB,MAAZ;AAEAhB,EAAAA,QAAQ,CAAC;AACRM,IAAAA,IAAI,EAAEZ;AADE,GAAD,CAAR;AAGA,CANM","sourcesContent":["import {\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAIL,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAIL,\r\n\tLOGOUT,\r\n\tSET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../Services/Auth.service\";\r\n\r\nexport const register = (user_data, imgFile) => (dispatch) => {\r\n\treturn AuthService.register(user_data, imgFile)\r\n\t// .then(\r\n\t// \t(response) => {\r\n\t// \t\tdispatch({\r\n\t// \t\t\ttype: REGISTER_SUCCESS,\r\n\t// \t\t});\r\n\r\n\t// \t\tdispatch({\r\n\t// \t\t\ttype: SET_MESSAGE,\r\n\t// \t\t\tpayload: response.data.message,\r\n\t// \t\t});\r\n\t// \t\tconsole.log('actions: ', response.data.message)\r\n\t// \t\treturn Promise.resolve();\r\n\t// \t},\r\n\t// \t(error) => {\r\n\t// \t\tconst message =\r\n\t// \t\t\t(error.response &&\r\n\t// \t\t\t\terror.response.data &&\r\n\t// \t\t\t\terror.response.data.message) ||\r\n\t// \t\t\terror.message ||\r\n\t// \t\t\terror.toString();\r\n\r\n\t// \t\tdispatch({\r\n\t// \t\t\ttype: REGISTER_FAIL,\r\n\t// \t\t});\r\n\r\n\t// \t\tdispatch({\r\n\t// \t\t\ttype: SET_MESSAGE,\r\n\t// \t\t\tpayload: message,\r\n\t// \t\t});\r\n\r\n\t// \t\treturn Promise.reject();\r\n\t// \t}\r\n\t// );\r\n};\r\n\r\nexport const login = (userID, password) => (dispatch) => {\r\n\treturn AuthService.login(userID, password)\r\n\t\t.then(\r\n\t\t\t(data) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\t\t\tpayload: { user: data },\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: data.message,\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n\tAuthService.logout();\r\n\r\n\tdispatch({\r\n\t\ttype: LOGOUT,\r\n\t});\r\n};"]},"metadata":{},"sourceType":"module"}