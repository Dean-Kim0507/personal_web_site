{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE, UPDATE_SUCCESS, UPDATE_FAIL, DELETE_ACCOUNT, DELETE_ACCOUNT_SUCCESS, UNAUTHORIZED, NO_TOKEN_PROVIDED } from \"./types\";\nimport { useHistory } from \"react-router-dom\";\nimport AuthService from \"../Services/Auth.service\";\nexport const register = (user_data, imgFile) => dispatch => {\n  let history = useHistory();\n  return AuthService.register(user_data, imgFile).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    console.log('actions: ', response.data.message);\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (userID, password) => dispatch => {\n  return AuthService.login(userID, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const userUpdate = (user_data, imgFile) => dispatch => {\n  return AuthService.userUpdate(user_data, imgFile).then(data => {\n    dispatch({\n      type: UPDATE_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: data.message\n    });\n    return Promise.resolve(); // }\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    console.log(message); // // if (message == UNAUTHORIZED || message == NO_TOKEN_PROVIDED) {\n    // \tdispatch({\n    // \t\ttype: LOGIN_INVALID,\n    // \t});\n    // \tdispatch({\n    // \t\ttype: SET_MESSAGE,\n    // \t\tpayload: message,\n    // \t});\n    // \tlocalStorage.removeItem(\"user\");\n    // }\n    // else {\n\n    dispatch({\n      type: UPDATE_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    }); // }\n\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["C:/Users/834043/Desktop/study/Personal_Web_Site/client/src/Actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","UPDATE_SUCCESS","UPDATE_FAIL","DELETE_ACCOUNT","DELETE_ACCOUNT_SUCCESS","UNAUTHORIZED","NO_TOKEN_PROVIDED","useHistory","AuthService","register","user_data","imgFile","dispatch","history","then","response","type","payload","data","message","console","log","Promise","resolve","error","toString","reject","login","userID","password","user","logout","userUpdate"],"mappings":"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","sourcesContent":["import {\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAIL,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAIL,\r\n\tLOGOUT,\r\n\tSET_MESSAGE,\r\n\tUPDATE_SUCCESS,\r\n\tUPDATE_FAIL,\r\n\tDELETE_ACCOUNT,\r\n\tDELETE_ACCOUNT_SUCCESS,\r\n\tUNAUTHORIZED,\r\n\tNO_TOKEN_PROVIDED\r\n} from \"./types\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AuthService from \"../Services/Auth.service\";\r\n\r\nexport const register = (user_data, imgFile) => (dispatch) => {\r\n\tlet history = useHistory();\r\n\treturn AuthService.register(user_data, imgFile)\r\n\t\t.then(\r\n\t\t\t(response) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: REGISTER_SUCCESS,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: response.data.message,\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log('actions: ', response.data.message)\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: REGISTER_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n\r\nexport const login = (userID, password) => (dispatch) => {\r\n\treturn AuthService.login(userID, password)\r\n\t\t.then(\r\n\t\t\t(data) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\t\t\tpayload: { user: data },\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: data.message,\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n\tAuthService.logout();\r\n\r\n\tdispatch({\r\n\t\ttype: LOGOUT,\r\n\t});\r\n};\r\n\r\nexport const userUpdate = (user_data, imgFile) => (dispatch) => {\r\n\treturn AuthService.userUpdate(user_data, imgFile)\r\n\t\t.then(\r\n\t\t\t(data) => {\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_SUCCESS,\r\n\t\t\t\t\tpayload: { user: data }\r\n\t\t\t\t});\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: data.message,\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t// }\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\t\t\t\tconsole.log(message);\r\n\t\t\t\t// // if (message == UNAUTHORIZED || message == NO_TOKEN_PROVIDED) {\r\n\t\t\t\t// \tdispatch({\r\n\t\t\t\t// \t\ttype: LOGIN_INVALID,\r\n\t\t\t\t// \t});\r\n\r\n\t\t\t\t// \tdispatch({\r\n\t\t\t\t// \t\ttype: SET_MESSAGE,\r\n\t\t\t\t// \t\tpayload: message,\r\n\t\t\t\t// \t});\r\n\t\t\t\t// \tlocalStorage.removeItem(\"user\");\r\n\t\t\t\t// }\r\n\t\t\t\t// else {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\t\t\t\t// }\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}