{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE, UPDATE_SUCCESS, UPDATE_FAIL, DELETE_ACCOUNT, DELETE_ACCOUNT_SUCCESS, LOGIN_INVALID, LOGIN_VALID, UNAUTHORIZED } from \"./types\";\nimport AuthService from \"../Services/Auth.service\";\nexport const register = (user_data, imgFile) => dispatch => {\n  return AuthService.register(user_data, imgFile).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    console.log('actions: ', response.data.message);\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (userID, password) => dispatch => {\n  return AuthService.login(userID, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const userUpdate = (user_data, imgFile) => dispatch => {\n  return AuthService.userUpdate(user_data, imgFile).then(data => {\n    // if (data.message == DELETE_ACCOUNT_SUCCESS) {\n    // \tdispatch({\n    // \t\ttype: LOGOUT\n    // \t});\n    // \tdispatch({\n    // \t\ttype: SET_MESSAGE,\n    // \t\tpayload: data.message,\n    // \t});\n    // \treturn Promise.resolve();\n    // }\n    // else {\n    dispatch({\n      type: UPDATE_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: data.message\n    });\n    return Promise.resolve(); // }\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: UPDATE_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const loginValid = userID => dispatch => {\n  return AuthService.loginValid(userID).then(data => {\n    dispatch({\n      type: LOGIN_VALID\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: data.message\n    });\n    return Promise.resolve(); // }\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    message == dispatch({\n      type: LOGIN_INVALID\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["C:/Users/834043/Desktop/study/Personal_Web_Site/client/src/Actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","UPDATE_SUCCESS","UPDATE_FAIL","DELETE_ACCOUNT","DELETE_ACCOUNT_SUCCESS","LOGIN_INVALID","LOGIN_VALID","UNAUTHORIZED","AuthService","register","user_data","imgFile","dispatch","then","response","type","payload","data","message","console","log","Promise","resolve","error","toString","reject","login","userID","password","user","logout","userUpdate","loginValid"],"mappings":"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","sourcesContent":["import {\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAIL,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAIL,\r\n\tLOGOUT,\r\n\tSET_MESSAGE,\r\n\tUPDATE_SUCCESS,\r\n\tUPDATE_FAIL,\r\n\tDELETE_ACCOUNT,\r\n\tDELETE_ACCOUNT_SUCCESS,\r\n\tLOGIN_INVALID,\r\n\tLOGIN_VALID,\r\n\tUNAUTHORIZED\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../Services/Auth.service\";\r\n\r\nexport const register = (user_data, imgFile) => (dispatch) => {\r\n\treturn AuthService.register(user_data, imgFile)\r\n\t\t.then(\r\n\t\t\t(response) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: REGISTER_SUCCESS,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: response.data.message,\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log('actions: ', response.data.message)\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: REGISTER_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n\r\nexport const login = (userID, password) => (dispatch) => {\r\n\treturn AuthService.login(userID, password)\r\n\t\t.then(\r\n\t\t\t(data) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\t\t\tpayload: { user: data },\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: data.message,\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n\tAuthService.logout();\r\n\r\n\tdispatch({\r\n\t\ttype: LOGOUT,\r\n\t});\r\n};\r\n\r\nexport const userUpdate = (user_data, imgFile) => (dispatch) => {\r\n\treturn AuthService.userUpdate(user_data, imgFile)\r\n\t\t.then(\r\n\t\t\t(data) => {\r\n\t\t\t\t// if (data.message == DELETE_ACCOUNT_SUCCESS) {\r\n\t\t\t\t// \tdispatch({\r\n\t\t\t\t// \t\ttype: LOGOUT\r\n\t\t\t\t// \t});\r\n\r\n\t\t\t\t// \tdispatch({\r\n\t\t\t\t// \t\ttype: SET_MESSAGE,\r\n\t\t\t\t// \t\tpayload: data.message,\r\n\t\t\t\t// \t});\r\n\t\t\t\t// \treturn Promise.resolve();\r\n\t\t\t\t// }\r\n\t\t\t\t// else {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_SUCCESS,\r\n\t\t\t\t\tpayload: { user: data }\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: data.message,\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t// }\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: UPDATE_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n\r\n\r\nexport const loginValid = (userID) => (dispatch) => {\r\n\treturn AuthService.loginValid(userID)\r\n\t\t.then(\r\n\t\t\t(data) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_VALID\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: data.message,\r\n\t\t\t\t});\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t// }\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tmessage ==\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: LOGIN_INVALID,\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}