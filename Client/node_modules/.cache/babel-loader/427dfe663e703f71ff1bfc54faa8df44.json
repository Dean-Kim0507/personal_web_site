{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\834043\\\\Desktop\\\\study\\\\Personal_Web_Site\\\\client\\\\src\\\\Components\\\\BlogList.jsx\";\n\n/**\r\n * last updated: Nov 26 2020\r\n * Author: Dean Kim (dean.kim0507@gmail.com)\r\n * \r\n * This page shows the bloglist by using modal in bootstrap.\r\n * modal get the card that is included images and blog information from the Read Blog List.\r\n * user can click the thumbnails that's the first picture of pictures, user upladed\r\n * If user didn't upload any image, No Image file will be uploaded\r\n * \r\n * Map: RedBlogList, CreateBlogList - > BlogList.js -> Body.js -> index.js - > index.html\r\n * (Storing to Database) Http: CreateBlogList (Client) -> blogDataController (server)\r\n * (Retrieving from Database) Http: ReadBlogList (server) - > BlogList.js (Client)\r\n */\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Card, CardColumns, Badge } from 'react-bootstrap';\nimport '../css/BlogList.css';\nimport axios from 'axios';\nimport ReadBlogList from './BlogComponents/ReadBlogList';\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { UNAUTHORIZED } from \"./type\";\nimport { SET_MESSAGE } from \"../Actions/types\";\n\nconst format = require('date-format');\n\nfunction BlogList(props) {\n  const {\n    message\n  } = useSelector(state => state.message);\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n  const [data, setData] = useState(null);\n  const [images, setImages] = useState(null);\n\n  const handleClose = () => setShow(false);\n\n  let history = useHistory();\n  let splittedImagePaths;\n  let splittedImagePaths_preview;\n  let temp_allBlogs = [];\n  let [allBlogs, setAllBlogs] = useState([]);\n  let nowDate = format.asString('MM-dd-yyyy', new Date());\n  useEffect(() => {\n    if (message == UNAUTHORIZED) {\n      dispatch({\n        type: SET_MESSAGE,\n        payload: null\n      });\n      history.push('/login');\n    }\n  }, [message]); // When user select the thumbnail, that function will be worked for retrieving the selected blog,\n\n  const handleShow = data => {\n    setShow(true);\n    setData(data); //If over two images, it splits the images' paths\n\n    splittedImagePaths = data.imagePaths.split(',');\n\n    for (let a = 0; a < splittedImagePaths.length; a++) {\n      splittedImagePaths[a] = splittedImagePaths[a].substring(16, splittedImagePaths[a].length);\n      console.log(splittedImagePaths[a]);\n    }\n\n    setImages(splittedImagePaths);\n  }; //Integreate two object (blog information, blog comments)\n\n\n  useEffect(() => {\n    axios.post(\"/blog/list\").then(response => {\n      console.log(response.data); //to show current blog at the first.\n\n      for (let i = response.data.length - 1; i >= 0; i--) {\n        let temp_data = {\n          id: Number,\n          writer: String,\n          title: String,\n          desc: String,\n          userID: String,\n          isLogedIn: Boolean,\n          imagePaths: String,\n          createdAt: String,\n          updatedAt: String,\n          userImg: String\n        };\n        temp_data.id = Number.parseInt(response.data[i].id);\n        temp_data.writer = response.data[i].writer;\n        temp_data.title = response.data[i].title;\n        temp_data.desc = response.data[i].desc;\n        temp_data.userID = response.data[i].userID;\n        temp_data.isLogedIn = response.data[i].isLogedIn;\n        temp_data.imagePaths = response.data[i].imagePaths;\n        temp_data.createdAt = response.data[i].createdAt;\n        temp_data.updatedAt = response.data[i].updatedAt;\n        temp_data.userImg = response.data[i].userImg;\n        temp_allBlogs.push(temp_data);\n      }\n\n      setAllBlogs(temp_allBlogs);\n    });\n  }, []);\n  console.log(temp_allBlogs);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blogList_whole\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"blogList_addBlog_button\",\n    variant: \"primary\",\n    href: \"/blogcreate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 4\n    }\n  }, \"Add Blog\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blogList_list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, allBlogs.map(data => {\n    splittedImagePaths_preview = data.imagePaths.split(',');\n    splittedImagePaths_preview[0] = splittedImagePaths_preview[0].substring(16, splittedImagePaths_preview[0].length);\n    console.log(splittedImagePaths_preview[0]);\n    if (splittedImagePaths_preview[0] === \"\") splittedImagePaths_preview[0] = \"/uploadImages/No_Image.jpg\";\n    return splittedImagePaths_preview[0] && /*#__PURE__*/React.createElement(Card, {\n      className: \"blogList_thumbnail\",\n      key: data.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 10\n      }\n    }, data.title, format.asString('MM-dd-yyyy', new Date(data.createdAt)) === nowDate ? /*#__PURE__*/React.createElement(Badge, {\n      variant: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, \"New\") : null), /*#__PURE__*/React.createElement(Card.Img, {\n      alt: \"171x180\",\n      src: splittedImagePaths_preview[0],\n      onClick: () => handleShow(data),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 10\n      }\n    }));\n  })), data && /*#__PURE__*/React.createElement(Modal, {\n    show: show,\n    onHide: handleClose,\n    className: \"blogList_modal\",\n    centered: true,\n    size: 'lg',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, data.isLogedIn ? data.userID : data.writer), /*#__PURE__*/React.createElement(ReadBlogList, {\n    id: data.id,\n    title: data.title,\n    desc: data.desc,\n    imagePathArray: images,\n    createdAt: data.createdAt,\n    updatedAt: data.updatedAt,\n    className: \"blogList_detailedBlog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }))));\n}\n\nexport default BlogList;","map":{"version":3,"sources":["C:/Users/834043/Desktop/study/Personal_Web_Site/client/src/Components/BlogList.jsx"],"names":["React","useState","useEffect","Modal","Button","Card","CardColumns","Badge","axios","ReadBlogList","useHistory","useDispatch","useSelector","UNAUTHORIZED","SET_MESSAGE","format","require","BlogList","props","message","state","dispatch","show","setShow","data","setData","images","setImages","handleClose","history","splittedImagePaths","splittedImagePaths_preview","temp_allBlogs","allBlogs","setAllBlogs","nowDate","asString","Date","type","payload","push","handleShow","imagePaths","split","a","length","substring","console","log","post","then","response","i","temp_data","id","Number","writer","String","title","desc","userID","isLogedIn","Boolean","createdAt","updatedAt","userImg","parseInt","map"],"mappings":"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","sourcesContent":["/**\r\n * last updated: Nov 26 2020\r\n * Author: Dean Kim (dean.kim0507@gmail.com)\r\n * \r\n * This page shows the bloglist by using modal in bootstrap.\r\n * modal get the card that is included images and blog information from the Read Blog List.\r\n * user can click the thumbnails that's the first picture of pictures, user upladed\r\n * If user didn't upload any image, No Image file will be uploaded\r\n * \r\n * Map: RedBlogList, CreateBlogList - > BlogList.js -> Body.js -> index.js - > index.html\r\n * (Storing to Database) Http: CreateBlogList (Client) -> blogDataController (server)\r\n * (Retrieving from Database) Http: ReadBlogList (server) - > BlogList.js (Client)\r\n */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Card, CardColumns, Badge } from 'react-bootstrap';\r\nimport '../css/BlogList.css'\r\nimport axios from 'axios';\r\nimport ReadBlogList from './BlogComponents/ReadBlogList';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n\tUNAUTHORIZED\r\n} from \"./type\";\r\nimport {\r\n\tSET_MESSAGE\r\n} from \"../Actions/types\";\r\nconst format = require('date-format');\r\nfunction BlogList(props) {\r\n\tconst { message } = useSelector(state => state.message);\r\n\tconst dispatch = useDispatch();\r\n\tconst [show, setShow] = useState(false);\r\n\tconst [data, setData] = useState(null);\r\n\tconst [images, setImages] = useState(null);\r\n\tconst handleClose = () => setShow(false);\r\n\tlet history = useHistory();\r\n\tlet splittedImagePaths;\r\n\tlet splittedImagePaths_preview;\r\n\tlet temp_allBlogs = [];\r\n\tlet [allBlogs, setAllBlogs] = useState([]);\r\n\tlet nowDate = format.asString('MM-dd-yyyy', new Date());\r\n\r\n\tuseEffect(() => {\r\n\t\tif (message == UNAUTHORIZED) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\tpayload: null,\r\n\t\t\t});\r\n\t\t\thistory.push('/login');\r\n\t\t}\r\n\t}, [message])\r\n\t// When user select the thumbnail, that function will be worked for retrieving the selected blog,\r\n\tconst handleShow = (data) => {\r\n\t\tsetShow(true);\r\n\t\tsetData(data);\r\n\r\n\t\t//If over two images, it splits the images' paths\r\n\t\tsplittedImagePaths = data.imagePaths.split(',');\r\n\t\tfor (let a = 0; a < splittedImagePaths.length; a++) {\r\n\t\t\tsplittedImagePaths[a] = splittedImagePaths[a].substring(16, splittedImagePaths[a].length);\r\n\t\t\tconsole.log(splittedImagePaths[a]);\r\n\t\t}\r\n\t\tsetImages(splittedImagePaths);\r\n\t}\r\n\t//Integreate two object (blog information, blog comments)\r\n\tuseEffect(() => {\r\n\t\taxios.post(\"/blog/list\")\r\n\t\t\t.then(response => {\r\n\t\t\t\tconsole.log(response.data);\r\n\t\t\t\t//to show current blog at the first.\r\n\t\t\t\tfor (let i = response.data.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet temp_data = {\r\n\t\t\t\t\t\tid: Number,\r\n\t\t\t\t\t\twriter: String,\r\n\t\t\t\t\t\ttitle: String,\r\n\t\t\t\t\t\tdesc: String,\r\n\t\t\t\t\t\tuserID: String,\r\n\t\t\t\t\t\tisLogedIn: Boolean,\r\n\t\t\t\t\t\timagePaths: String,\r\n\t\t\t\t\t\tcreatedAt: String,\r\n\t\t\t\t\t\tupdatedAt: String,\r\n\t\t\t\t\t\tuserImg: String\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttemp_data.id = Number.parseInt(response.data[i].id);\r\n\t\t\t\t\ttemp_data.writer = response.data[i].writer;\r\n\t\t\t\t\ttemp_data.title = response.data[i].title;\r\n\t\t\t\t\ttemp_data.desc = response.data[i].desc;\r\n\t\t\t\t\ttemp_data.userID = response.data[i].userID;\r\n\t\t\t\t\ttemp_data.isLogedIn = response.data[i].isLogedIn;\r\n\t\t\t\t\ttemp_data.imagePaths = response.data[i].imagePaths;\r\n\t\t\t\t\ttemp_data.createdAt = response.data[i].createdAt;\r\n\t\t\t\t\ttemp_data.updatedAt = response.data[i].updatedAt;\r\n\t\t\t\t\ttemp_data.userImg = response.data[i].userImg;\r\n\t\t\t\t\ttemp_allBlogs.push(temp_data);\r\n\t\t\t\t}\r\n\t\t\t\tsetAllBlogs(temp_allBlogs);\r\n\t\t\t})\r\n\t}, []);\r\n\tconsole.log(temp_allBlogs)\r\n\treturn (\r\n\t\t<div className=\"blogList_whole\">\r\n\t\t\t<Button className=\"blogList_addBlog_button\" variant=\"primary\" href='/blogcreate'>Add Blog</Button>\r\n\t\t\t<hr />\r\n\r\n\t\t\t<div className=\"blogList_list\">\r\n\t\t\t\t<CardColumns>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tallBlogs.map((data) => {\r\n\t\t\t\t\t\t\tsplittedImagePaths_preview = data.imagePaths.split(',');\r\n\t\t\t\t\t\t\tsplittedImagePaths_preview[0] = splittedImagePaths_preview[0].substring(16, splittedImagePaths_preview[0].length);\r\n\t\t\t\t\t\t\tconsole.log(splittedImagePaths_preview[0])\r\n\t\t\t\t\t\t\tif (splittedImagePaths_preview[0] === \"\") splittedImagePaths_preview[0] = \"/uploadImages/No_Image.jpg\";\r\n\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\tsplittedImagePaths_preview[0] &&\r\n\t\t\t\t\t\t\t\t<Card className=\"blogList_thumbnail\" key={data.id}>\r\n\t\t\t\t\t\t\t\t\t<Card.Header>\r\n\t\t\t\t\t\t\t\t\t\t{data.title}\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tformat.asString('MM-dd-yyyy', new Date(data.createdAt)) === nowDate ?\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Badge variant=\"secondary\">New</Badge>\r\n\t\t\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t\t\t<Card.Img\r\n\t\t\t\t\t\t\t\t\t\talt=\"171x180\"\r\n\t\t\t\t\t\t\t\t\t\tsrc={splittedImagePaths_preview[0]}\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleShow(data)}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</CardColumns>\r\n\r\n\t\t\t\t{data &&\r\n\t\t\t\t\t< Modal show={show} onHide={handleClose} className=\"blogList_modal\"\r\n\t\t\t\t\t\tcentered={true} size={'lg'}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Modal.Header closeButton>{\r\n\t\t\t\t\t\t\tdata.isLogedIn ?\r\n\t\t\t\t\t\t\t\tdata.userID\r\n\t\t\t\t\t\t\t\t: data.writer\r\n\t\t\t\t\t\t}</Modal.Header>\r\n\t\t\t\t\t\t<ReadBlogList id={data.id}\r\n\t\t\t\t\t\t\ttitle={data.title}\r\n\t\t\t\t\t\t\tdesc={data.desc}\r\n\t\t\t\t\t\t\timagePathArray={images}\r\n\t\t\t\t\t\t\tcreatedAt={data.createdAt}\r\n\t\t\t\t\t\t\tupdatedAt={data.updatedAt}\r\n\t\t\t\t\t\t\tclassName=\"blogList_detailedBlog\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t</ReadBlogList>\r\n\t\t\t\t\t</Modal>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t);\r\n}\r\n\r\nexport default BlogList;"]},"metadata":{},"sourceType":"module"}