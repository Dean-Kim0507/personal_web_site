{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../Services/Auth.service\";\nexport const register = user_data => dispatch => {\n  return AuthService.register(user_data).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    console.log('actions: ', response.data.message);\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (userID, password) => dispatch => {\n  return AuthService.login(userID, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"sources":["C:/Users/834043/Desktop/study/Personal_Web_Site/client/src/Actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","user_data","dispatch","then","response","type","payload","data","message","console","log","Promise","resolve","error","toString","reject","login","userID","password","user"],"mappings":"AAAA,SACCA,gBADD,EAECC,aAFD,EAGCC,aAHD,EAICC,UAJD,EAKCC,MALD,EAMCC,WAND,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,SAAD,IAAgBC,QAAD,IAAc;AACpD,SAAOH,WAAW,CAACC,QAAZ,CAAqBC,SAArB,EACLE,IADK,CAEJC,QAAD,IAAc;AACbF,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEZ;AADE,KAAD,CAAR;AAIAS,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEP,WADE;AAERQ,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;AAFf,KAAD,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBN,QAAQ,CAACG,IAAT,CAAcC,OAAvC;AACA,WAAOG,OAAO,CAACC,OAAR,EAAP;AACA,GAbI,EAcJC,KAAD,IAAW;AACV,UAAML,OAAO,GACXK,KAAK,CAACT,QAAN,IACAS,KAAK,CAACT,QAAN,CAAeG,IADf,IAEAM,KAAK,CAACT,QAAN,CAAeG,IAAf,CAAoBC,OAFrB,IAGAK,KAAK,CAACL,OAHN,IAIAK,KAAK,CAACC,QAAN,EALD;AAOAZ,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEX;AADE,KAAD,CAAR;AAIAQ,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEP,WADE;AAERQ,MAAAA,OAAO,EAAEE;AAFD,KAAD,CAAR;AAKA,WAAOG,OAAO,CAACI,MAAR,EAAP;AACA,GAhCI,CAAP;AAkCA,CAnCM;AAqCP,OAAO,MAAMC,KAAK,GAAG,CAACC,MAAD,EAASC,QAAT,KAAuBhB,QAAD,IAAc;AACxD,SAAOH,WAAW,CAACiB,KAAZ,CAAkBC,MAAlB,EAA0BC,QAA1B,EACLf,IADK,CAEJI,IAAD,IAAU;AACTL,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEV,aADE;AAERW,MAAAA,OAAO,EAAE;AAAEa,QAAAA,IAAI,EAAEZ;AAAR;AAFD,KAAD,CAAR;AAKA,WAAOI,OAAO,CAACC,OAAR,EAAP;AACA,GATI,EAUJC,KAAD,IAAW;AACV,UAAML,OAAO,GACXK,KAAK,CAACT,QAAN,IACAS,KAAK,CAACT,QAAN,CAAeG,IADf,IAEAM,KAAK,CAACT,QAAN,CAAeG,IAAf,CAAoBC,OAFrB,IAGAK,KAAK,CAACL,OAHN,IAIAK,KAAK,CAACC,QAAN,EALD;AAOAZ,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAET;AADE,KAAD,CAAR;AAIAM,IAAAA,QAAQ,CAAC;AACRG,MAAAA,IAAI,EAAEP,WADE;AAERQ,MAAAA,OAAO,EAAEE;AAFD,KAAD,CAAR;AAKA,WAAOG,OAAO,CAACI,MAAR,EAAP;AACA,GA5BI,CAAP;AA8BA,CA/BM","sourcesContent":["import {\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAIL,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAIL,\r\n\tLOGOUT,\r\n\tSET_MESSAGE,\r\n} from \"./types\";\r\n\r\nimport AuthService from \"../Services/Auth.service\";\r\n\r\nexport const register = (user_data) => (dispatch) => {\r\n\treturn AuthService.register(user_data)\r\n\t\t.then(\r\n\t\t\t(response) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: REGISTER_SUCCESS,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: response.data.message,\r\n\t\t\t\t});\r\n\t\t\t\tconsole.log('actions: ', response.data.message)\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: REGISTER_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};\r\n\r\nexport const login = (userID, password) => (dispatch) => {\r\n\treturn AuthService.login(userID, password)\r\n\t\t.then(\r\n\t\t\t(data) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\t\t\tpayload: { user: data },\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\t(error) => {\r\n\t\t\t\tconst message =\r\n\t\t\t\t\t(error.response &&\r\n\t\t\t\t\t\terror.response.data &&\r\n\t\t\t\t\t\terror.response.data.message) ||\r\n\t\t\t\t\terror.message ||\r\n\t\t\t\t\terror.toString();\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: LOGIN_FAIL,\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: SET_MESSAGE,\r\n\t\t\t\t\tpayload: message,\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t);\r\n};"]},"metadata":{},"sourceType":"module"}