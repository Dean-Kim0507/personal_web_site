{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\834043\\\\Desktop\\\\study\\\\Personal_Web_Site\\\\client\\\\src\\\\Components\\\\CommunityComponents\\\\CommunityPost.jsx\";\nimport React, { Component, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TOC from \"./Components/TOC\";\nimport ReadContent from \"./Components/ReadContent\";\nimport Subject from \"./Components/Subject\";\nimport Control from \"./Components/Control\";\nimport UpdateContent from \"./Components/UpdateContent\";\nimport CreateContent from './Components/CreateContent';\nimport axios from 'axios';\nimport { Button } from 'reactstrap';\nimport { UNAUTHORIZED } from \"../../Components/type\";\nimport { SET_MESSAGE } from \"../../Actions/types\"; // Use class\n\nclass CommunityPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'list',\n      selected_content_id: 0,\n      contents: [],\n      type: this.props.type,\n      subject: \"Community Post\",\n      subtitle: \"Do you play any games? Let's share it!\"\n    };\n  } // receive data by using fetch\n\n\n  componentDidMount() {\n    console.log('componentDidMount()');\n\n    if (this.state.type === 'feedbackpost') {\n      this.setState({\n        subject: \"Feed Back Post\",\n        subtitle: \"Feel free to leave any feed back for this web page!\"\n      });\n    }\n\n    axios.post('/communitypost/senddata', {\n      type: this.state.type\n    }).then(response => this.setState(() => ({\n      contents: response.data.rows\n    }))).then(console.log(this.state.contents));\n  } // receive data by using axios (don't need to convert)\n\n\n  async setData(_id, _writer, _title, _desc, _mode) {\n    console.log('setData()');\n    let data = {\n      id: _id,\n      writer: _writer,\n      title: _title,\n      description: _desc,\n      mode: _mode,\n      type: this.state.type\n    };\n    await axios.post('/communitypost/receivedata', data).then(response => this.setState(() => ({\n      contents: response.data.rows[1]\n    }))) // {this.setState({contents: response.data.rows[1]})})\n    .then(console.log(this.state.contents)).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  getReadContent() {\n    console.log('getReadContent()');\n    let i = 0;\n\n    while (i < this.state.contents.length) {\n      let data = this.state.contents[i];\n\n      if (data.id === this.state.selected_content_id) {\n        return data;\n      }\n\n      i = i + 1;\n    }\n  }\n\n  getContent() {\n    console.log('getContent()');\n\n    let _article,\n        _content = null;\n\n    if (this.state.mode === 'list') {\n      _article = /*#__PURE__*/React.createElement(TOC, {\n        onChangePage: async function (id) {\n          await this.setState({\n            mode: 'read',\n            selected_content_id: Number(id)\n          });\n        }.bind(this),\n        data: this.state.contents,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      });\n      return _article;\n    } //read\n    else if (this.state.mode === 'read') {\n        _content = this.getReadContent();\n        console.log(_content);\n        _article = /*#__PURE__*/React.createElement(ReadContent, {\n          id: _content.id,\n          writer: _content.writer,\n          title: _content.title,\n          desc: _content.description,\n          date: _content.date,\n          time: _content.time,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }\n        });\n      } // Update\n      else if (this.state.mode === 'update') {\n          _content = this.getReadContent();\n          _article = /*#__PURE__*/React.createElement(UpdateContent, {\n            data: _content,\n            onSubmit: function (_id, _writer, _title, _desc) {\n              //add content to this.state.cotnents\n              this.setData(_id, _writer, _title, _desc, 'update');\n              this.setState({\n                mode: 'read'\n              });\n            }.bind(this),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }\n          });\n        } //create\n        else if (this.state.mode === 'create') {\n            _article = /*#__PURE__*/React.createElement(CreateContent, {\n              onSubmit: async function (_writer, _title, _desc) {\n                //add content to this.state.cotnents\n                await this.setData(0, _writer, _title, _desc, 'create');\n                await this.setState({\n                  selected_content_id: this.state.contents[this.state.contents.length - 1].id,\n                  mode: 'read'\n                });\n              }.bind(this),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 15\n              }\n            });\n          }\n\n    return _article;\n  }\n\n  createController() {\n    let _button;\n\n    if (this.state.mode === 'read') {\n      console.log('createController()');\n      _button = /*#__PURE__*/React.createElement(Control, {\n        onChangeMode: function (_mode) {\n          //delete\n          if (_mode === 'delete') {\n            if (window.confirm('really?')) {\n              console.log(this.state.selected_content_id);\n              this.setData(this.state.selected_content_id, '', '', '', 'delete');\n              this.setState({\n                mode: 'list',\n                selected_content_id: 0\n              });\n              alert('deleted!');\n            }\n          } else {\n            this.setState({\n              mode: _mode\n            });\n          }\n        }.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 14\n        }\n      });\n      return _button;\n    } else {\n      return null;\n    }\n  }\n\n  createPost() {\n    let _post;\n\n    if (this.state.mode !== 'create') {\n      console.log('createPost()');\n      _post = /*#__PURE__*/React.createElement(Button, {\n        onClick: function (e) {\n          e.preventDefault();\n          this.setState({\n            mode: 'create'\n          });\n        }.bind(this),\n        type: \"button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 12\n        }\n      }, \"Add New Post\");\n      return _post;\n    } else return null;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"CommunityPost\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Subject, {\n      title: this.state.subject,\n      sub: this.state.subtitle,\n      onChangePage: function () {\n        this.setState({\n          mode: 'list'\n        });\n      }.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 5\n      }\n    }), this.getContent(), this.createController(), this.createPost());\n  }\n\n}\n\nexport default CommunityPost;","map":{"version":3,"sources":["C:/Users/834043/Desktop/study/Personal_Web_Site/client/src/Components/CommunityComponents/CommunityPost.jsx"],"names":["React","Component","useEffect","useHistory","useDispatch","useSelector","TOC","ReadContent","Subject","Control","UpdateContent","CreateContent","axios","Button","UNAUTHORIZED","SET_MESSAGE","CommunityPost","constructor","props","state","mode","selected_content_id","contents","type","subject","subtitle","componentDidMount","console","log","setState","post","then","response","data","rows","setData","_id","_writer","_title","_desc","_mode","id","writer","title","description","catch","error","getReadContent","i","length","getContent","_article","_content","Number","bind","date","time","createController","_button","window","confirm","alert","createPost","_post","e","preventDefault","render"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport TOC from \"./Components/TOC\";\r\nimport ReadContent from \"./Components/ReadContent\";\r\nimport Subject from \"./Components/Subject\";\r\nimport Control from \"./Components/Control\";\r\nimport UpdateContent from \"./Components/UpdateContent\";\r\nimport CreateContent from './Components/CreateContent';\r\nimport axios from 'axios';\r\nimport { Button } from 'reactstrap';\r\nimport {\r\n\tUNAUTHORIZED\r\n} from \"../../Components/type\";\r\nimport {\r\n\tSET_MESSAGE\r\n} from \"../../Actions/types\";\r\n\r\n// Use class\r\nclass CommunityPost extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tmode: 'list',\r\n\t\t\tselected_content_id: 0,\r\n\t\t\tcontents: [],\r\n\t\t\ttype: this.props.type,\r\n\t\t\tsubject: \"Community Post\",\r\n\t\t\tsubtitle: \"Do you play any games? Let's share it!\"\r\n\t\t}\r\n\r\n\t}\r\n\t// receive data by using fetch\r\n\tcomponentDidMount() {\r\n\t\tconsole.log('componentDidMount()');\r\n\r\n\t\tif (this.state.type === 'feedbackpost') {\r\n\t\t\tthis.setState({\r\n\t\t\t\tsubject: \"Feed Back Post\",\r\n\t\t\t\tsubtitle: \"Feel free to leave any feed back for this web page!\"\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\taxios.post('/communitypost/senddata', { type: this.state.type })\r\n\t\t\t.then(response =>\r\n\t\t\t\tthis.setState(() => ({ contents: response.data.rows })))\r\n\t\t\t.then(console.log(this.state.contents))\r\n\r\n\t}\r\n\r\n\t// receive data by using axios (don't need to convert)\r\n\tasync setData(_id, _writer, _title, _desc, _mode) {\r\n\t\tconsole.log('setData()');\r\n\t\tlet data = {\r\n\t\t\tid: _id,\r\n\t\t\twriter: _writer,\r\n\t\t\ttitle: _title,\r\n\t\t\tdescription: _desc,\r\n\t\t\tmode: _mode,\r\n\t\t\ttype: this.state.type\r\n\t\t}\r\n\r\n\t\tawait axios.post('/communitypost/receivedata', data)\r\n\t\t\t.then(response =>\r\n\t\t\t\tthis.setState(() => ({ contents: response.data.rows[1] })))\r\n\t\t\t// {this.setState({contents: response.data.rows[1]})})\r\n\t\t\t.then(console.log(this.state.contents))\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetReadContent() {\r\n\t\tconsole.log('getReadContent()');\r\n\t\tlet i = 0;\r\n\t\twhile (i < this.state.contents.length) {\r\n\t\t\tlet data = this.state.contents[i];\r\n\t\t\tif (data.id === this.state.selected_content_id) {\r\n\t\t\t\treturn data;\r\n\t\t\t}\r\n\t\t\ti = i + 1;\r\n\t\t}\r\n\t}\r\n\r\n\tgetContent() {\r\n\t\tconsole.log('getContent()');\r\n\t\tlet _article, _content = null;\r\n\t\tif (this.state.mode === 'list') {\r\n\t\t\t_article = <TOC onChangePage={\r\n\t\t\t\tasync function (id) {\r\n\t\t\t\t\tawait this.setState({\r\n\t\t\t\t\t\tmode: 'read',\r\n\t\t\t\t\t\tselected_content_id: Number(id)\r\n\t\t\t\t\t});\r\n\t\t\t\t}.bind(this)\r\n\t\t\t} data={this.state.contents}></TOC>\r\n\t\t\treturn _article\r\n\t\t}\r\n\r\n\t\t//read\r\n\t\telse if (this.state.mode === 'read') {\r\n\t\t\t_content = this.getReadContent();\r\n\t\t\tconsole.log(_content);\r\n\t\t\t_article = <ReadContent id={_content.id} writer={_content.writer} title={_content.title} desc={_content.description} date={_content.date} time={_content.time} ></ReadContent>\r\n\t\t}\r\n\r\n\t\t// Update\r\n\t\telse if (this.state.mode === 'update') {\r\n\t\t\t_content = this.getReadContent();\r\n\t\t\t_article = <UpdateContent data={_content} onSubmit={\r\n\t\t\t\tfunction (_id, _writer, _title, _desc) {\r\n\t\t\t\t\t//add content to this.state.cotnents\r\n\t\t\t\t\tthis.setData(_id, _writer, _title, _desc, 'update');\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tmode: 'read'\r\n\t\t\t\t\t});\r\n\t\t\t\t}.bind(this)\r\n\t\t\t}></UpdateContent>\r\n\r\n\t\t}\r\n\r\n\t\t//create\r\n\t\telse if (this.state.mode === 'create') {\r\n\t\t\t_article = <CreateContent onSubmit={\r\n\t\t\t\tasync function (_writer, _title, _desc) {\r\n\t\t\t\t\t//add content to this.state.cotnents\r\n\t\t\t\t\tawait this.setData(0, _writer, _title, _desc, 'create');\r\n\t\t\t\t\tawait this.setState({\r\n\t\t\t\t\t\tselected_content_id: this.state.contents[this.state.contents.length - 1].id,\r\n\t\t\t\t\t\tmode: 'read'\r\n\t\t\t\t\t});\r\n\t\t\t\t}.bind(this)\r\n\t\t\t}></CreateContent>\r\n\t\t}\r\n\t\treturn _article;\r\n\t}\r\n\r\n\tcreateController() {\r\n\t\tlet _button;\r\n\t\tif (this.state.mode === 'read') {\r\n\t\t\tconsole.log('createController()');\r\n\t\t\t_button = <Control onChangeMode={function (_mode) {\r\n\t\t\t\t//delete\r\n\t\t\t\tif (_mode === 'delete') {\r\n\t\t\t\t\tif (window.confirm('really?')) {\r\n\t\t\t\t\t\tconsole.log(this.state.selected_content_id);\r\n\t\t\t\t\t\tthis.setData(this.state.selected_content_id, '', '', '', 'delete');\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\tmode: 'list',\r\n\t\t\t\t\t\t\tselected_content_id: 0\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\talert('deleted!');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tmode: _mode\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}.bind(this)}></Control>\r\n\t\t\treturn _button;\r\n\t\t}\r\n\t\telse { return null; }\r\n\t}\r\n\r\n\tcreatePost() {\r\n\t\tlet _post;\r\n\t\tif (this.state.mode !== 'create') {\r\n\t\t\tconsole.log('createPost()');\r\n\t\t\t_post = <Button onClick={function (e) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.setState({ mode: 'create' })\r\n\t\t\t}.bind(this)} type=\"button\">Add New Post</Button>\r\n\r\n\t\t\treturn _post;\r\n\t\t}\r\n\t\telse return null;\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"CommunityPost\">\r\n\t\t\t\t<Subject\r\n\t\t\t\t\ttitle={this.state.subject}\r\n\t\t\t\t\tsub={this.state.subtitle}\r\n\t\t\t\t\tonChangePage={function () {\r\n\t\t\t\t\t\tthis.setState({ mode: 'list' });\r\n\r\n\t\t\t\t\t}.bind(this)}\r\n\t\t\t\t></Subject>\r\n\r\n\t\t\t\t{this.getContent()}\r\n\r\n\t\t\t\t{this.createController()}\r\n\r\n\t\t\t\t{this.createPost()}\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default CommunityPost;"]},"metadata":{},"sourceType":"module"}